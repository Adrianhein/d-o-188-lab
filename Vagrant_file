Vagrant.configure("2") do |config|
    #config.vm.provider "vmware_desktop" do |vb|
    config.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
    end

    config.vm.define "registry.do188.lab" do |server|
      server.vm.box = "roboxes/centos9s"
      server.vm.hostname = "registry.do188.lab"
      server.vm.network "private_network", ip: "192.168.33.20"
      server.vm.provision "shell", inline: <<-SHELL
               echo " 192.168.33.20 registry.do188.lab" >> /etc/hosts
               echo " 192.168.33.30 client.do188.lab" >> /etc/hosts
               echo "vagrant" |passwd --stdin vagrant
               sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
               systemctl restart sshd
        SHELL
    end

    config.vm.define "client.do188.lab" do |server|
      server.vm.box = "roboxes/centos9s"
      server.vm.hostname = "registry.do188.lab"
      server.vm.network "private_network", ip: "192.168.33.30"
      server.vm.provision "shell", inline: <<-SHELL
               echo " 192.168.33.20 registry.do188.lab" >> /etc/hosts
               echo " 192.168.33.30 client.do188.lab" >> /etc/hosts
               echo "vagrant" |passwd --stdin vagrant
               sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
               systemctl restart sshd
        SHELL
    end


end

:'

  config.vm.box = "roboxes/centos9s"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Example for VirtualBox: config.vm.provider "virtualbox" do |vb|
  # Example for VMWareWorkStation: config.vm.provider "vmware_desktop" do |vb|
   config.vm.provider "vmware_desktop" do |vb|
     vb.memory = "1024"
   end

   config.vm.provision "shell", inline: <<-SHELL
     dnf update -y
     dnf install epel-release -y
     dnf install -y podman podman-compose telnet vim wget net-tools policycoreutils-python-utils
     hostnamectl set-hostname registry.do188.lab
     echo " $(hostname -i) registry.do180.lab" >> /etc/hosts
   SHELL
end
'


###################################################################################

1) Some updates need to be done on SERVER " vagrant ssh registry "
sudo su -
rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
dnf install -y podman
podman run -d -p 5000:5000 --name registry registry:2
echo " 192.168.88.5 registry.do180.lab" >> /etc/hosts
echo " 192.168.88.4 workstation.do180.lab" >> /etc/hosts
## Add below blocks to " vi /etc/containers/registries.conf "
#Add this and see in screenshot>>>
[registries]

#Add this and see in screenshot>>>
[registries.search]
registries = ['registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'registry.do180.lab:5000']
[registries.insecure]
registries = ['registry.do180.lab:5000']

#######Letâ€™s do this below steps after config modified above#######
podman search httpd ####searching from the public repos
podman pull httpd
####pull image from public repos
podman tag httpd:latest registry.do180.lab:5000/httpd:latest ####tag the image before pushing to the
local repo(registry.do180.lab:5000)
podman push registry.do180.lab:5000/httpd:latest
repo(registry.do180.lab:5000)
curl http://registry.do180.lab:5000/v2/_catalog
####PUSH the image to the local
####Verify the local repos in the local repo directory



###################################################################################



2) Some updates need to be done on CLIENT " vagrant ssh workstation "
sudo su -
rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
dnf install -y podman
echo " 192.168.88.5 registry.do180.lab" >> /etc/hosts
echo " 192.168.88.4 workstation.do180.lab" >> /etc/hosts
## Add below blocks to " vi /etc/containers/registries.conf "
#Add this and see in screenshot>>> [registries]

##Add this entries below
[registries.search]
###registries = ['registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'registry.do180.lab:5000']
registries = ['registry.do180.lab:5000']
[registries.insecure]
registries = ['registry.do180.lab:5000']

###### To confirm repos is working or not
###### Login to the CLIENT
vagrant ssh workstatsion
sudo su -
curl http://registry.do180.lab:5000/v2/
#### Verify from client to the server: If the registry is
running, you'll see an empty JSON response ({}).
curl http://registry.do180.lab:5000/v2/_catalog #### If "httpd" is listed, then you can list its tags:
### after verifying all things, we can start the tasks:
podman search httpd
podman pull httpd
##DONE to lab setup

###################################################################################

