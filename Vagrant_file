Vagrant.configure("2") do |config|
    #config.vm.provider "vmware_desktop" do |vb|
    config.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
    end

    config.vm.define "registry.do188.lab" do |server|
      server.vm.box = "roboxes/centos9s"
      server.vm.hostname = "registry.do188.lab"
      server.vm.network "private_network", ip: "192.168.33.20"
      server.vm.provision "shell", inline: <<-SHELL
               echo " 192.168.33.20 registry.do188.lab" >> /etc/hosts
               echo " 192.168.33.30 client.do188.lab" >> /etc/hosts
               echo "vagrant" |passwd --stdin vagrant
               sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
               systemctl restart sshd
        SHELL
    end

    config.vm.define "client.do188.lab" do |server|
      server.vm.box = "roboxes/centos9s"
      server.vm.hostname = "registry.do188.lab"
      server.vm.network "private_network", ip: "192.168.33.30"
      server.vm.provision "shell", inline: <<-SHELL
               echo " 192.168.33.20 registry.do188.lab" >> /etc/hosts
               echo " 192.168.33.30 client.do188.lab" >> /etc/hosts
               echo "vagrant" |passwd --stdin vagrant
               sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
               systemctl restart sshd
        SHELL
    end


end

:'

  config.vm.box = "roboxes/centos9s"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Example for VirtualBox: config.vm.provider "virtualbox" do |vb|
  # Example for VMWareWorkStation: config.vm.provider "vmware_desktop" do |vb|
   config.vm.provider "vmware_desktop" do |vb|
     vb.memory = "1024"
   end

   config.vm.provision "shell", inline: <<-SHELL
     dnf update -y
     dnf install epel-release -y
     dnf install -y podman podman-compose telnet vim wget net-tools policycoreutils-python-utils
     hostnamectl set-hostname registry.do188.lab
     echo " $(hostname -i) registry.do180.lab" >> /etc/hosts
   SHELL
end
'


###################################################################################

1) Some updates need to be done on SERVER " vagrant ssh registry "
sudo su -
rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
dnf install -y podman
podman run -d -p 5000:5000 --name registry registry:2
echo " 192.168.88.5 registry.do180.lab" >> /etc/hosts
echo " 192.168.88.4 workstation.do180.lab" >> /etc/hosts
## Add below blocks to " vi /etc/containers/registries.conf "
#Add this and see in screenshot>>>
[registries]

#Add this and see in screenshot>>>
[registries.search]
registries = ['registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'registry.do180.lab:5000']
[registries.insecure]
registries = ['registry.do180.lab:5000']

#######Letâ€™s do this below steps after config modified above#######
podman search httpd ####searching from the public repos
podman pull httpd
####pull image from public repos
podman tag httpd:latest registry.do180.lab:5000/httpd:latest ####tag the image before pushing to the
local repo(registry.do180.lab:5000)
podman push registry.do180.lab:5000/httpd:latest
repo(registry.do180.lab:5000)
curl http://registry.do180.lab:5000/v2/_catalog
####PUSH the image to the local
####Verify the local repos in the local repo directory



###################################################################################



2) Some updates need to be done on CLIENT " vagrant ssh workstation "
sudo su -
rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux
dnf install -y podman
echo " 192.168.88.5 registry.do180.lab" >> /etc/hosts
echo " 192.168.88.4 workstation.do180.lab" >> /etc/hosts
## Add below blocks to " vi /etc/containers/registries.conf "
#Add this and see in screenshot>>> [registries]

##Add this entries below
[registries.search]
###registries = ['registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'registry.do180.lab:5000']
registries = ['registry.do180.lab:5000']
[registries.insecure]
registries = ['registry.do180.lab:5000']

###### To confirm repos is working or not
###### Login to the CLIENT
vagrant ssh workstatsion
sudo su -
curl http://registry.do180.lab:5000/v2/
#### Verify from client to the server: If the registry is
running, you'll see an empty JSON response ({}).
curl http://registry.do180.lab:5000/v2/_catalog #### If "httpd" is listed, then you can list its tags:
### after verifying all things, we can start the tasks:
podman search httpd
podman pull httpd
##DONE to lab setup

###################################################################################



[root@registry ~]# cat /etc/containers/registries.conf
# For more information on this configuration file, see containers-registries.conf(5).
#
# NOTE: RISK OF USING UNQUALIFIED IMAGE NAMES
# We recommend always using fully qualified image names including the registry
# server (full dns name), namespace, image name, and tag
# (e.g., registry.redhat.io/ubi8/ubi:latest). Pulling by digest (i.e.,
# quay.io/repository/name@digest) further eliminates the ambiguity of tags.
# When using short names, there is always an inherent risk that the image being
# pulled could be spoofed. For example, a user wants to pull an image named
# `foobar` from a registry and expects it to come from myregistry.com. If
# myregistry.com is not first in the search list, an attacker could place a
# different `foobar` image at a registry earlier in the search list. The user
# would accidentally pull and run the attacker's image and code rather than the
# intended content. We recommend only adding registries which are completely
# trusted (i.e., registries which don't allow unknown or anonymous users to
# create accounts with arbitrary names). This will prevent an image from being
# spoofed, squatted or otherwise made insecure.  If it is necessary to use one
# of these registries, it should be added at the end of the list.
#
# # An array of host[:port] registries to try when pulling an unqualified image, in order.

unqualified-search-registries = ["registry.access.redhat.com", "registry.redhat.io", "docker.io"]

# [[registry]]
# # The "prefix" field is used to choose the relevant [[registry]] TOML table;
# # (only) the TOML table with the longest match for the input image name
# # (taking into account namespace/repo/tag/digest separators) is used.
# #
# # The prefix can also be of the form: *.example.com for wildcard subdomain
# # matching.
# #
# # If the prefix field is missing, it defaults to be the same as the "location" field.
# prefix = "example.com/foo"
#
# # If true, unencrypted HTTP as well as TLS connections with untrusted
# # certificates are allowed.
# insecure = false
#
# # If true, pulling images with matching names is forbidden.
# blocked = false
#
# # The physical location of the "prefix"-rooted namespace.
# #
# # By default, this is equal to "prefix" (in which case "prefix" can be omitted
# # and the [[registry]] TOML table can only specify "location").
# #
# # Example: Given
# #   prefix = "example.com/foo"
# #   location = "internal-registry-for-example.net/bar"
# # requests for the image example.com/foo/myimage:latest will actually work with the
# # internal-registry-for-example.net/bar/myimage:latest image.
#
# # The location can be empty iff prefix is in a
# # wildcarded format: "*.example.com". In this case, the input reference will
# # be used as-is without any rewrite.
# location = internal-registry-for-example.com/bar"
#
# # (Possibly-partial) mirrors for the "prefix"-rooted namespace.
# #
# # The mirrors are attempted in the specified order; the first one that can be
# # contacted and contains the image will be used (and if none of the mirrors contains the image,
# # the primary location specified by the "registry.location" field, or using the unmodified
# # user-specified reference, is tried last).
# #
# # Each TOML table in the "mirror" array can contain the following fields, with the same semantics
# # as if specified in the [[registry]] TOML table directly:
# # - location
# # - insecure
# [[registry.mirror]]
# location = "example-mirror-0.local/mirror-for-foo"
# [[registry.mirror]]
# location = "example-mirror-1.local/mirrors/foo"
# insecure = true
# # Given the above, a pull of example.com/foo/image:latest will try:
# # 1. example-mirror-0.local/mirror-for-foo/image:latest
# # 2. example-mirror-1.local/mirrors/foo/image:latest
# # 3. internal-registry-for-example.net/bar/image:latest
# # in order, and use the first one that exists.
short-name-mode = "enforcing"
[root@registry ~]#

